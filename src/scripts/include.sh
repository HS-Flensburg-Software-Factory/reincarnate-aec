#!/usr/bin/env bash

# exit on error
set -e

# determine physical directory of this script
src="${BASH_SOURCE[0]}"
while [ -L "$src" ]; do
  dir="$(cd -P "$(dirname "$src")" && pwd)"
  src="$(readlink "$src")"
  [[ $src != /* ]] && src="$dir/$src"
done
MYDIR="$(cd -P "$(dirname "$src")" && pwd)"

export RROOT="$(cd -P "$MYDIR/.." && pwd)"
export RREPO="$(cd -P "$RROOT/.." && pwd)"

export ORIG_CMDLINE="$0 $@"

export WEBHOST="uwplse.org"
export WEBROOT="/var/www/incarnate"
export WREMOTE="${WEBHOST}:${WEBROOT}"
export WEBGROUP="uwplse"

# machine name used to track test times in reports
export TIMINGHOST="sharkskin"

# ANSI color codes
export BLK=$'\033[1;30m' # black
export RED=$'\033[1;31m' # red
export GRN=$'\033[1;32m' # green
export YLO=$'\033[1;33m' # yellow
export BLU=$'\033[1;34m' # blue
export MAG=$'\033[1;35m' # magenta
export CYN=$'\033[1;36m' # cyan
export WHT=$'\033[1;37m' # white
export CLR=$'\033[0m'    # no color

function error {
  local msg="$1"

  local c0=""
  local c1=""
  [ -t 1 ] && c0="$RED" && c1="$CLR"

  echo "${c0}ERROR:${c1} $msg" >&2
  exit 1
}
export -f error

function warn {
  local msg="$1"

  local c0=""
  local c1=""
  [ -t 1 ] && c0="$YLO" && c1="$CLR"

  echo "${c0}Warning:${c1} $msg" >&2
}
export -f warn

function usage_error {
  local msg="$1"

  usage
  echo
  error "$msg"
}
export -f usage_error

function assert_nonnegi {
  local name="$1"
  local val="$2"

  case "$val" in
    ''|*[!0-9]*)
      usage_error "$name must be a nonnegative integer, got '$val'" ;;
    *) ;;
  esac
}
export -f assert_nonnegi

function prompt_yn {
  local msg="$1"
  local response

  read -p "$msg (y/n)? " response
  case "${response:0:1}" in
    y|Y) true  ;;
     * ) false ;;
  esac
}
export -f prompt_yn

function prompt_continue {
  if prompt_yn $'\nContinue'; then
    return 0
  else
    exit 0
  fi
}
export -f prompt_continue

export DATE="date"
if command -v gdate > /dev/null 2>&1; then
  DATE="gdate"
fi
$DATE --version | grep -q GNU > /dev/null 2>&1 \
  || error "GNU date is required."

export AWK="awk -W lint=fatal"
if command -v gawk > /dev/null 2>&1; then
  AWK="gawk -W lint=fatal"
fi
$AWK --version | grep -q GNU > /dev/null 2>&1 \
  || error "GNU awk is required."

export TIME="command time"
if command -v gtime > /dev/null 2>&1; then
  TIME="command gtime"
fi
($TIME --version) 2>&1 | grep -q GNU > /dev/null 2>&1 \
  || error "GNU time is required."

function get_field {
  local field="$1"
  local path="$2"

  grep "$field" "$path" \
    | head -n 1         \
    | $AWK '{ print $2 }'
}
export -f get_field

function get_tm_field {
  local path="$1"
  local field="$2"

  grep "$field" "$path" \
    | head -n 1         \
    | $AWK -F":" '{ print $2 }'
}
export -f get_tm_field

function csv_sort {
  $AWK -v key="$1" -f "$RROOT/script/csv-sort.awk"
}
export -f csv_sort

function csv_sum {
  local csv="$1"
  local key="$2"

  $AWK -F"," \
    "BEGIN { s = 0 } NR > 1 { s += \$$key } END { print s }" \
    "$csv"
}
export -f csv_sum

function line_count {
  wc -l "$1" \
    | $AWK '{ print $1 }'
}
export -f line_count

function csv_len {
  echo $(($(line_count "$1") - 1))
}
export -f csv_len

function who_where_when {
  echo "Generated by $(whoami)@$(hostname) on $($DATE)"
}
export -f who_where_when

function provenance {
  local file="$1"; shift

  if [ ! -f "$file" ]; then
    warn "cannot provenance, '$file' not found"
    return 1
  fi

  { shasum "$file"       \
  ; echo                 \
  ; who_where_when       \
  ; echo                 \
  ; echo "$ORIG_CMDLINE" \
  ; echo                 \
  ; echo "$@"            \
  ; } > "$file.prov"
}
export -f provenance

function try_cat {
  local path="$1"

  [ -f "$path" ]   \
    && cat "$path" \
    || warn "couldn't cat '$path'"
}
export -f try_cat

function htmlify {
  sed -e 's/&/\&amp;/g'     \
      -e 's/</\&lt;/g'      \
      -e 's/>/\&gt;/g'      \
      -e 's/"/\&quot;/g'    \
      -e 's/'"'"'/\&#39;/g'
}
export -f htmlify

function html_hdr {
  local title="$1"

  cat <<EOF
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="google" content="notranslate">
  <title>$title</title>
  <link rel='stylesheet' type='text/css' href='/reports/reports.css'>
</head>
<body>
  <h1>$title</h1>
EOF
}
export -f html_hdr

function html_hdri {
  local title="$1"

  html_hdr "$title"
  cat <<EOF
  <div class='top-right'>
    <a class='index-link' href='/reports/'>[index]</a>
  </div>
EOF
}
export -f html_hdri

function html_ftr {
  local vurl="https://validator.w3.org/unicorn/check?ucn_task=conformance&ucn_uri=referer"

  cat <<EOF
  <p class='footer'>
    <br>
    $(who_where_when)
    <br>
    <a href='$vurl' target='_blank'>
      Validate HTML/CSS</a>
  </p>
</body>
</html>
EOF
}
export -f html_ftr

function html_ftrjs {
  cat <<EOF
  <script>
    function elem(id) {
      return document.getElementById(id);
    }

    function install_countdown(nm, tgt) {
      // update every second
      var x = setInterval(function() {
        var diff = tgt - (new Date().getTime());

        var d = Math.floor(diff / (1000 * 60 * 60 * 24));
        var h = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var m = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        var s = Math.floor((diff % (1000 * 60)) / 1000);

        var tm = "";
        if(d > 0) {
          tm = d + " days";
        } else if(h > 0) {
          tm = h + " hours";
        } else if(m > 0) {
          tm = m + " minutes";
        } else if(s > 0) {
          tm = s + " seconds";
        } else {
          tm = tgt + " passed";
        }
        elem(nm).innerHTML = tm;

        if(diff < 0) {
          // how can this work if x not in scope?!
          // https://www.w3schools.com/howto/howto_js_countdown.asp
          clearInterval(x);
        }
      }, 1000);
    }

    window.onload = function(e) {
      install_countdown('icfp-aec-deadline',
        new Date("Jun 1, 2018 23:59:59").getTime());
      install_countdown('icfp-phase2-deadline',
        new Date("Jun 22, 2018 23:59:59").getTime());
      install_countdown('icfp-cr-deadline',
        new Date("Jul 7, 2018 23:59:59").getTime());
    }
  </script>
EOF
  html_ftr
}
export -f html_ftrjs

function publish_chmod {
  local d="$1"

  # will error for files from other users (expected)
  ssh "$WEBHOST" chgrp -R "$WEBGROUP" "$WEBROOT/$d" \
    > /dev/null 2>&1 || true
  ssh "$WEBHOST" chmod -R ug=rwX,o=rX "$WEBROOT/$d" \
    > /dev/null 2>&1 || true
}
export -f publish_chmod

function icon {
  local name="$1"
  local ttip="$2"

  local p="/reports/icons/$name.png"
  echo "<img class='icon' title='$ttip' src='$p'>"
}
export -f icon

function publish_extras {
  scp -qr                       \
    "$RROOT/script/reports.css" \
    "$RROOT/script/icons"       \
    "$WREMOTE/reports/"
  publish_chmod "reports"
}
export -f publish_extras

function ghub_clone {
  git clone git@github.com:uwplse/reincarnate.git "$1"
}
export -f ghub_clone

function ghub_url {
  echo "https://github.com/uwplse/reincarnate/tree/$1"
}
export -f ghub_url
